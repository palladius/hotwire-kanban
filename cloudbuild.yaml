# Google Cloud Build configuration for a Ruby on Rails application
# This file defines the build steps, substitutions (variables), and options for your CI/CD pipeline.

substitutions:
  _PROJECT_ID: 'palladius-genai'    # üü¢ Replace with your GCP Project ID
  _APP_NAME: 'kanban-board'         # üü¢ Replace with your Application Name (e.g., hotwire-kanban)
  _GCP_REGION: 'europe-west1'       # üü¢ Replace with your GCP Region (e.g., us-central1)
  _RUBY_VERSION: '3.3.3'            # Ruby version, taken from your justfile context
  _RAILS_MASTER_KEY_SECRET_NAME: 'ROR_KANBAN_BOARD_RAILS_MASTER_KEY' # üü° Name of the secret in Secret Manager containing your RAILS_MASTER_KEY

steps:
  # Step 1: Install Ruby gems üíé
  # This step installs Bundler and then uses it to install application gems.
  # It configures Bundler to skip development and test groups for a production build.
  - name: 'ruby:${_RUBY_VERSION}-slim' # Using a slim Ruby image for efficiency
    id: 'Bundle-Install'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e # Exit immediately if a command exits with a non-zero status.
        echo "üü¢ Installing Bundler and gems..."
        gem install bundler --no-document
        bundle config set --local without 'development test' # Exclude dev/test gems
        bundle install --jobs $(nproc) --retry 3 # Install gems using all available processors
        echo "‚úÖ Gems installed successfully!"

  # Step 2: Precompile Rails assets üñåÔ∏è
  # This step compiles assets (JavaScript, CSS, images) for production.
  # It requires RAILS_ENV=production and a SECRET_KEY_BASE.
  # If your application uses encrypted credentials (credentials.yml.enc) that are needed
  # during asset compilation, RAILS_MASTER_KEY must be available.
  - name: 'ruby:${_RUBY_VERSION}-slim'
    id: 'Assets-Precompile'
    waitFor: ['Bundle-Install'] # Ensure gems are installed before precompiling
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üü° Precompiling assets..."
        # RAILS_MASTER_KEY_FROM_SECRET is an environment variable automatically set by Cloud Build.
        # Its value is the path to a file containing the secret fetched from Secret Manager.
        if [ -n "$RAILS_MASTER_KEY_FROM_SECRET" ] && [ -f "$RAILS_MASTER_KEY_FROM_SECRET" ]; then
          export RAILS_MASTER_KEY=$(cat "$RAILS_MASTER_KEY_FROM_SECRET")
          echo "üîë RAILS_MASTER_KEY loaded from Secret Manager."
        else
          echo "‚ö†Ô∏è RAILS_MASTER_KEY_FROM_SECRET env var not set or file not found. Path: '$RAILS_MASTER_KEY_FROM_SECRET'."
          echo "Asset precompilation might fail if it relies on encrypted credentials."
          # Consider adding 'exit 1' here if RAILS_MASTER_KEY is critical for assets:precompile
        fi

        # A dummy SECRET_KEY_BASE is often sufficient for assets:precompile.
        # If your app needs a real one derived from RAILS_MASTER_KEY for asset compilation, adjust accordingly.
        export SECRET_KEY_BASE_DUMMY=$(openssl rand -hex 64)

        RAILS_ENV=production SECRET_KEY_BASE=${SECRET_KEY_BASE_DUMMY} bundle exec rails assets:precompile
        echo "‚úÖ Assets precompiled successfully!"
    # This environment variable is populated by the 'availableSecrets' option below.
    # It will contain the path to the file where the secret content is stored.
    secretEnv: ['RAILS_MASTER_KEY_FROM_SECRET']

  # Step 3: Build Docker image üì¶üê≥
  # This step builds the Docker image using the Dockerfile in the current directory.
  # The image is tagged with the commit SHA and 'latest'.
  # üü° Ensure your Dockerfile is optimized for caching and correctly sets up the Rails environment.
  #    It should COPY the precompiled assets from the 'public/assets' directory.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Docker-Build'
    waitFor: ['Assets-Precompile'] # Ensure assets are compiled before building the image
    args:
      - 'build'
      - '--tag'
      - '${_GCP_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_APP_NAME}/${_APP_NAME}:$COMMIT_SHA' # Tag with commit SHA
      - '--tag'
      - '${_GCP_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_APP_NAME}/${_APP_NAME}:latest'      # Tag with 'latest'
      # If your Dockerfile needs RAILS_MASTER_KEY at build time (generally not recommended for the key itself),
      # you can pass it as a build-arg. However, RAILS_MASTER_KEY is typically a runtime environment variable.
      # - '--build-arg'
      # - "RAILS_MASTER_KEY_ARG_PLACEHOLDER=your_build_time_value_if_needed"
      - '.' # Path to the Dockerfile context (current directory)

  # Step 4: Push Docker image to Artifact Registry üöÄ
  # This step pushes the built Docker image to Google Artifact Registry.
  # üü° Ensure the Cloud Build service account has 'Artifact Registry Writer' role.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Docker-Push-Commit-SHA'
    waitFor: ['Docker-Build']
    args: ['push', '${_GCP_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_APP_NAME}/${_APP_NAME}:$COMMIT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Docker-Push-Latest'
    waitFor: ['Docker-Push-Commit-SHA']
    args: ['push', '${_GCP_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_APP_NAME}/${_APP_NAME}:latest']

  # Step 5: (Optional) Deploy to Cloud Run or trigger other post-build actions ‚òÅÔ∏è
  # This is an example of deploying to Cloud Run. Adjust as needed for your deployment strategy.
  # You might also run database migrations here or as a separate Cloud Run Job.
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   id: 'Deploy-To-Cloud-Run'
  #   waitFor: ['Docker-Push-Latest']
  #   entrypoint: gcloud
  #   args:
  #     - 'run'
  #     - 'deploy'
  #     - '${_APP_NAME}' # Your Cloud Run service name
  #     - '--image'
  #     - '${_GCP_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_APP_NAME}/${_APP_NAME}:$COMMIT_SHA'
  #     - '--region'
  #     - '${_GCP_REGION}'
  #     - '--platform'
  #     - 'managed'
  #     - '--allow-unauthenticated' # Or configure IAM for authentication
  #     # üü° Securely pass RAILS_MASTER_KEY and other runtime secrets to Cloud Run using its secret integration.
  #     # - '--set-secrets=RAILS_MASTER_KEY=projects/${_PROJECT_ID}/secrets/${_RAILS_MASTER_KEY_SECRET_NAME}/versions/latest'
  #     # - '--update-env-vars=RAILS_ENV=production'

# This 'images' directive is a declarative way to specify images that will be pushed.
# It's somewhat redundant given the explicit 'docker push' steps but can be useful for Cloud Build's metadata.
images:
  - '${_GCP_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_APP_NAME}/${_APP_NAME}:$COMMIT_SHA'
  - '${_GCP_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_APP_NAME}/${_APP_NAME}:latest'

options:
  machineType: 'E2_HIGHCPU_8' # Specifies the machine type for the build (e.g., E2_HIGHCPU_8, N1_HIGHCPU_8)
  diskSizeGb: 100             # Specifies the disk size for the build VMs
  # Defines how secrets from Secret Manager are made available to build steps.
  # üü° Ensure the Cloud Build service account has 'Secret Manager Secret Accessor' role for the specified secret.
  # Your build failed to run: failed unmarshalling build config cloudbuild.yaml: unknown field "availableSecrets" in google.devtools.cloudbuild.v1.BuildOptions
  # availableSecrets:
  #   secretManager:
  #   - versionName: projects/${_PROJECT_ID}/secrets/${_RAILS_MASTER_KEY_SECRET_NAME}/versions/latest
  #     env: 'RAILS_MASTER_KEY_FROM_SECRET' # This env var will hold the path to the file containing the secret

timeout: '1800s' # Timeout for the entire build (30 minutes)
