steps:
  - id: "build image"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: 'bash'
    args: ["-c", "docker build --build-arg MASTER_KEY=$$RAILS_KEY -t ${_IMAGE_NAME} . "]
    secretEnv: ["RAILS_KEY"]

  - id: "push image"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_IMAGE_NAME}"]

  - id: "apply migrations"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: /bin/bash
    secretEnv: ["RAILS_KEY"]
    args:
      - "-c"
      - |
        gcloud run jobs create migrate-job \
          --region ${_REGION} \
          --image ${_IMAGE_NAME} \
          --set-cloudsql-instances ${_CLOUD_SQL_CONNECTION_NAME} \
          --set-env-vars RAILS_MASTER_KEY=$$RAILS_KEY \
          --command bundle \
          --args exec,rails,db:migrate \
          --execute-now --wait && \
          gcloud run jobs delete  migrate-job --region ${_REGION} -q

  # # /usr/bin/env: 'ruby': No such file or directory
  # - id: "test DB to PosgreSQL"
  #   name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  #   entrypoint: /bin/bash
  #   secretEnv: [ "CB_DATABASE_URL"]
  #   args:
  #     - "-c"
  #     - |
  #       DATABASE_URL=$$CB_DATABASE_URL \
  #       bin/rails runner \
  #       'puts Card.count'
  - id: "AutoTag with latest version (TODO)"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: /bin/bash
    secretEnv:
    - "CB_DATABASE_URL"
    #- "_IMAGE_NAME"
    args:
      - "-c"
      - |
        bin/docker-auto-tag.sh "${_IMAGE_NAME}"


  - id: "deploy to Cloud Run DEV (sqlite3)"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: /bin/bash
    secretEnv:
      - "RAILS_KEY"
      # Strictly useless in DEV.
      - "CB_DATABASE_URL"
    args:
      - "-c"
      - |
        gcloud run deploy "${_SERVICE_NAME}-dev" \
        --region "${_REGION}" \
        --image "${_IMAGE_NAME}" \
        --add-cloudsql-instances "${PROJECT_ID}:${_REGION}:${_INSTANCE_NAME}" \
        --allow-unauthenticated \
        --set-env-vars "RAILS_MASTER_KEY=$$RAILS_KEY,RAILS_ENV=development,OCCASIONAL_MESSAGE=RiccardoCBDevProva1SEV" \
        --update-env-vars="RAILS_ENV=development" \
        --update-secrets RAILS_MASTER_KEY=projects/${PROJECT_ID}/secrets/${_SECRET_NAME}:latest \
        --update-secrets OCCASIONAL_MESSAGE=RiccardoCBDevProva2US \
        --platform managed \
        --project ${PROJECT_ID} \
        --port="3000" \
        --max-instances 2 \
        --cpu 2 \
        --memory 2Gi



  - id: "deploy to Cloud Run PROD (postgres)"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: /bin/bash
    secretEnv:
      - "RAILS_KEY"
      # Used in PROD
      - "CB_DATABASE_URL"
      #- "CB_SECRET_KEY_BASE"
    args:
      - "-c"
      # This is for prod
      #        --set-env-vars RAILS_MASTER_KEY=$$RAILS_KEY,,RAILS_ENV=development
      - |
        gcloud run deploy "${_SERVICE_NAME}-prod" \
        --region "${_REGION}" \
        --image "${_IMAGE_NAME}" \
        --add-cloudsql-instances "${PROJECT_ID}:${_REGION}:${_INSTANCE_NAME}" \
        --allow-unauthenticated \
        --set-env-vars "RAILS_MASTER_KEY=$$RAILS_KEY,DATABASE_URL=$$CB_DATABASE_URL,RAILS_ENV=production,OCCASIONAL_MESSAGE=RiccardoCBProdProva1SEV" \
        --update-secrets RAILS_MASTER_KEY=projects/${PROJECT_ID}/secrets/${_SECRET_NAME}:latest \
        --update-secrets OCCASIONAL_MESSAGE=RiccardoCBProdProva2US \
        --platform managed \
        --project ${PROJECT_ID} \
        --port="3000" \
        --max-instances 2 \
        --cpu 2 \
        --memory 2Gi



options:
  dynamicSubstitutions: true
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8' # Specifies the machine type for the build (e.g., E2_HIGHCPU_8, N1_HIGHCPU_8)

substitutions:
  _REGION: europe-west1
  _SERVICE_NAME: kanbard-board-on-cloud-run
  _INSTANCE_NAME: kanbard-test # Name of the Cloud SQL instance
  # Docs wants this but I have plenty so i specify the app too: "rails-master-key"
  _SECRET_NAME: kanban-board__RAILS_MASTER_KEY
  _AR_REPO_NAME: cloud-run-source-deploy
  _IMAGE_NAME: ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_SERVICE_NAME}
  _CLOUD_SQL_CONNECTION_NAME: ${PROJECT_ID}:${_REGION}:${_INSTANCE_NAME}

availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/${_SECRET_NAME}/versions/latest
    env: RAILS_KEY
    # I can use this to set the database URL too for postgres, eg, running a Card.all.count on rails runner to check the DB works like bin/rails runner 'puts Card.count'
  - versionName: projects/${PROJECT_ID}/secrets/kanban-board__DATABASE_URL/versions/latest
    env: CB_DATABASE_URL

  # # Not sure this is needed but its here if you need it.
  # - versionName: projects/${PROJECT_ID}/secrets/kanban-board__SECRET_KEY_BASE/versions/latest
  #   env: CB_SECRET_KEY_BASE
images:
  - "${_IMAGE_NAME}"

timeout: '1800s' # Timeout for the entire build (30 minutes)
